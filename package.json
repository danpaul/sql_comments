{
  "name": "sql_comment",
  "version": "0.0.0",
  "description": "SQL backed node comments with nesting and ranking",
  "main": "index.js",
  "scripts": {
    "test": "node test/index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/danpaul/sql_comments.git"
  },
  "author": {
    "name": "Dan Breczinski",
    "email": "pt2323@gmail.com",
    "url": "https://github.com/danpaul"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/danpaul/sql_comments/issues"
  },
  "homepage": "https://github.com/danpaul/sql_comments",
  "dependencies": {
    "async": "^0.9.0",
    "debug": "^2.2.0",
    "decay": "^1.0.8",
    "underscore": "^1.8.2"
  },
  "devDependencies": {
    "knex": "^0.7.4",
    "mysql": "^2.5.5"
  },
  "gitHead": "cde6dfb9e19c0536f149ad89852fb0e147c9c132",
  "readme": "## About\n\nSql Comment is an SQL backed ([Knex](http://knexjs.org/) compatible) comment service written in node. Sql Comment does not sanitize user input (so you shound handle that yourself). The basic functionality has been tested but tests still need to get written for some of the flagging functionality so I can't guarantee these features are entirely stable yet.\n\nSql Comment uses [Wilson Score](http://www.evanmiller.org/how-not-to-sort-by-average-rating.html) (Reddit's best comment scoring system) ranking system and uses a configurable flagging system.\n\n## Settings\n\nThere are a handful of flagging settings that affect how flagged comments are handled and how users who are flagged too often and users who flag comments too often are handled. If a user's comment is flagged above a certain threshold and is above a certain flag to up vote ratio, it will get deleted. If a user has too many flags in a certain period of time, they will be banned from commenting for a certain amount of time. If a user gets banned too many times, they will be permanently banned. Finally, if a user flags too many comments in a certain amount of time they will get banned from flagging for a period of time. If they get banned from flagging too many times, they will get permanently banned from flagging.\n\nTake a look at [settings]('./settings.js') to see the defaults for flagging and other settings. These can get overridden via the options parameter passed to the consctructor.\n\n## Example\n\n```Javascript\nvar _ = require('underscore')\nvar async = require('async')\nvar knex = require('knex')\n\nvar SqlComment = require('./index')\n\nvar dbCreds = {\n    client: 'mysql',\n    connection: {\n        host: 'localhost',\n        user: 'root',\n        password: 'root',\n        database: 'sql_comment',\n        port:  8889\n    }\n}\n\nvar knex = require('knex')(dbCreds)\n\nvar userId = 1\nvar postId = 1\nvar comment\n\nasync.waterfall([\n\n    // initialize\n    function(callback){\n        sqlComment = new SqlComment({ knex: knex, minimumFlagsToBan: 1 },\n                                    callback )\n    },\n\n    // add comments\n    function(callback){\n        sqlComment.add(userId, postId, 0, 'This is a comment', callback)\n    },\n\n    // get comments\n    function(callback){\n        sqlComment.getComments(postId, false, callback)\n    },\n\n    // delete comment\n    function(callback){\n        sqlComment.delete(commentId, callback)\n    },\n\n    // get comments do not include deleted comments (second argument specifices\n    //  weather to include deleted comments)\n    function(callback){\n        sqlComment.getComments(postId, false, function(err, comments){\n            if( err ){ callback(err) }\n            else{ comment = comments[0] }\n        })\n    },\n\n    // cast upvote for post 2\n    // third argument \"isUpvote\", if `true` an upvote gets cast, else a downvote\n    function(callback){\n        sqlComment.vote(userId, comment['id'], true, callback)\n    },\n\n    // add nested comment to comment 2\n    function(callback){\n        sqlComment.add(userId,\n                       postId,\n                       comment['id'],\n                       'This is a nested comment',\n                       callback)\n    },\n\n    // flag comment\n    // first argument is the user who is flagging\n    // second argument is the comment getting flagged\n    function(callback){\n        sqlComment.flagUser(userId, comment['id'], callback)\n    },\n\n    // get formatted comments including delted comments\n    function(callback){\n        sqlComment.getFormattedComments(postId, true, function(err, comments){\n            if( err ){ callback(err) }\n            else{\n                console.log(comments)\n            }\n        })\n    }\n\n],\nfunction(err){\n    if( err ){ console.log(err) }\n    else{ console.log('done.') }\n})\n```",
  "readmeFilename": "README.md",
  "_id": "sql_comment@0.0.0",
  "_shasum": "f69417d3379a4568c6c242fe232a4b6aa5bf8c0d",
  "_from": "../../../../../../var/folders/l5/6xcn12xn02xg47gv5v11wgx80000gp/T/npm-3432-b08a5023/git-cache-bce3a0f0e7c7/cde6dfb9e19c0536f149ad89852fb0e147c9c132",
  "_resolved": "git://github.com/danpaul/sql_comments#cde6dfb9e19c0536f149ad89852fb0e147c9c132"
}
